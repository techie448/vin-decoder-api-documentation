/**
 * VINDecoderLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.MiscController;
const ValidVIN = testerlib.ValidVIN;

describe("MiscController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Todo Add description for test testVALIDVINEntered
     */
    it("should testVALIDVINEntered response", function testVALIDVINEnteredTest(done) {
        // parameters for the API call
        let id = 'JTHBJ46G082200702';

        controller.getVALIDVINEntered(id, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Connection'] = null;
            headers['cache-control'] = null;
            headers['content-length'] = null;
            headers['date'] = null;
            headers['etag'] = null;
            headers['x-vercel-cache'] = null;
            headers['age'] = null;
            headers['server'] = null;
            headers['x-vercel-id'] = null;
            headers['strict-transport-security'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "YEAR": 2008,
  "MAKE": "Lexus",
  "MODEL": "ES 350"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * Todo Add description for test testVINNotFound
     */
    it("should testVINNotFound response", function testVINNotFoundTest(done) {
        // parameters for the API call
        let id = 12345678912345678;

        controller.getVINNotFound(id, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Connection'] = null;
            headers['cache-control'] = null;
            headers['content-length'] = null;
            headers['date'] = null;
            headers['etag'] = null;
            headers['x-vercel-cache'] = null;
            headers['age'] = null;
            headers['server'] = null;
            headers['x-vercel-id'] = null;
            headers['strict-transport-security'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "YEAR": 2008,
  "MAKE": "Lexus",
  "MODEL": "ES 350"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * Todo Add description for test testInvalidVINEntered
     */
    it("should testInvalidVINEntered response", function testInvalidVINEnteredTest(done) {
        // parameters for the API call
        let id = 'example';

        controller.getInvalidVINEntered(id, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Connection'] = null;
            headers['cache-control'] = null;
            headers['content-length'] = null;
            headers['date'] = null;
            headers['etag'] = null;
            headers['x-vercel-cache'] = null;
            headers['age'] = null;
            headers['server'] = null;
            headers['x-vercel-id'] = null;
            headers['strict-transport-security'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "YEAR": 2008,
  "MAKE": "Lexus",
  "MODEL": "ES 350"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * Todo Add description for test testNoVIN
     */
    it("should testNoVIN response", function testNoVINTest(done) {
        controller.getNoVIN(function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Connection'] = null;
            headers['cache-control'] = null;
            headers['content-length'] = null;
            headers['date'] = null;
            headers['etag'] = null;
            headers['x-vercel-cache'] = null;
            headers['age'] = null;
            headers['server'] = null;
            headers['x-vercel-id'] = null;
            headers['strict-transport-security'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "YEAR": 2008,
  "MAKE": "Lexus",
  "MODEL": "ES 350"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });
});
